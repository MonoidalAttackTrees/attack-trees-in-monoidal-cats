module lineale where

open import prelude

ยก : {A : Set} โ (A โ A โ ๐น) โ A โ A โ Set
ยก r x y = r x y โก tt

record Poset (A : Set) : Set where
 constructor MkPoset
 field
   rel : A โ A โ ๐น
   prefl : โ{a : A} โ ยก rel a a
   ptrans : โ{a b c : A} โ ยก rel a b โ ยก rel b c โ ยก rel a c
   pasym : โ{a b : A} โ ยก rel a b โ ยก rel b a โ a โก b

open Poset public

record MonPoset (P : Set) : Set where
 constructor MkMonPoset
 field
   mul : P โ P โ P
   unit : P
   
   poset : Poset P
   assoc : โ{a b c : P} โ mul a (mul b c) โก mul (mul a b) c
   left-ident : โ{a : P} โ mul unit a โก a
   right-ident : โ{a : P} โ mul a unit โก a
   symm : โ{a b : P} โ mul a b โก mul b a
   compat : โ{a b : P} โ ยก (rel poset) a b โ (โ{c : P} โ ยก (rel poset) (mul a c) (mul b c))

open MonPoset public

record Lineale (L : Set) : Set where
 constructor MkLineale
 field
   mposet : MonPoset L
   l-imp : L โ L โ L
   
   rlcomp : (a b : L) โ ยก (rel (poset mposet)) ((mul mposet) a (l-imp a b)) b
   adj : {a b y : L} โ ยก (rel (poset mposet)) (mul mposet y a) b โ ยก (rel (poset mposet)) y (l-imp a b)

open Lineale public
