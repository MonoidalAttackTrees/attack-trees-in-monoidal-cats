% The full Ott spec of Simply Typed Grady.

embed
  {{tex-preamble \usepackage{cmll}
                 \usepackage{relsize} }}

metavar costvar, c ::=
metavar termvar, x, y , z, f ::=
metavar baseAttackVar, b ::=
indexvar index, i , j, k ::=

grammar
  op :: 'O_' ::=
    | (.)op :: :: Para
    {{tex \mathsf{op}_\odot }}
    | >op   :: :: Seq
    {{tex \mathsf{op}_\rhd }}
    | +op  :: :: Choice
    {{tex \mathsf{op}_\sqcup }}
    | ->op :: :: LImp
    {{tex \mathsf{rel}_{[[->]]} }}
    | <-op :: :: RImp
    {{tex \mathsf{rel}_{[[<-]]} }}
    | -oop :: :: Imp
    {{tex \mathsf{rel}_{[[-o]]} }}
    | ->op ( c , - ) :: :: LImp2
    {{tex \mathsf{rel}_{[[->]]}([[c]],-) }}
    | <-op ( c , - ) :: :: RImp2
    {{tex \mathsf{rel}_{[[<-]]}([[c]],-) }}
    | -oop ( c , - ) :: :: Imp2
    {{tex \mathsf{rel}_{[[-o]]}([[c]],-) }}
    | o-oop ( c , - ) :: :: BiImp
    {{tex \mathsf{rel}_{[[o-o]]}([[c]],-) }}            

  C :: 'C_' ::=
    | c :: :: cost
    | op ( C1 , C2 ) :: :: op
    | eta( b ) :: M :: costMap
    {{tex \eta([[b]]) }}

  T :: 'T_' ::=
    | b           :: :: Base
    | T1 (.)op T2 :: :: Para
    {{tex [[T1]] \odot_{\mathsf{op}_\odot} [[T2]] }}
    | T1 >op T2   :: :: Seq
    {{tex [[T1]] \rhd_{\mathsf{op}_\rhd} [[T2]] }}
    | T1 +op T2   :: :: Choice
    {{tex [[T1]] \sqcup_{\mathsf{op}_\sqcup} [[T2]] }}
    | ( T ) :: :: Parens

  E :: 'E_' ::=
    | b           :: :: AttackTree
    | E1 (.)op E2 :: :: Para
    {{tex [[E1]] \odot_{\mathsf{op}_\odot} [[E2]] }}
    | E1 >op E2   :: :: Seq
    {{tex [[E1]] \rhd_{\mathsf{op}_\rhd} [[E2]] }}
    | E1 +op E2   :: :: Choice
    {{tex [[E1]] \sqcup_{\mathsf{op}_\sqcup} [[E2]] }}    
    | E1 ->op( c , - ) E2 :: :: LinImp1
    {{tex [[E1]] \rightarrow_{\mathsf{rel}_{[[->]]}([[c]],-)} [[E2]] }}
    | E2 <-op( c , - ) E1 :: :: LinImp2
    {{tex [[E2]] \leftarrow_{\mathsf{rel}_{[[<-]]}([[c]],-)} [[E1]] }}
    | E1 -oop( c , - ) E2 :: :: LinImp
    {{tex [[E1]] \multimap_{\mathsf{rel}_{[[-o]]}([[c]],-)} [[E2]] }}
    | E1 o-oop( c , - ) E2 :: :: BiLinImp
    {{tex [[E1]] \multimapboth_{\mathsf{rel}_{[[o-o]]}([[c]],-)} [[E2]] }}    
    | ( E )               :: S :: Parens
    
  % G {{ tex \Gamma }}, D {{tex \Delta }} :: G_ ::=                 
  %   | .                   ::   :: emptyCtx     
  %   {{tex \cdot }}
  %   | ( b , c )           ::   :: vn           
  %   | G , G'              ::   :: append       
  %   | ( G )               :: M :: parens

  G {{ tex \Gamma }}, D {{tex \Delta }},
  I {{ tex \Theta }}, P {{tex \Psi }} :: I_ ::=                 
    | .                   ::   :: emptyCtx     
    {{tex \cdot }}
    | ( E , c )           ::   :: vn           
    | I , P               ::   :: append       
    | ( T )               :: M :: parens

  terminals :: 'terminals_' ::=
    | (.) :: :: Para
    {{tex \odot}}
    | > :: :: Seq
    {{tex \rhd}}
    | + :: :: Choice
    {{tex \sqcup }}
    |  ->                 ::   :: arrow
    {{tex \rightarrow }}
    |  <-                 ::   :: arrow2
    {{tex \leftarrow }}
    |  -o                 ::   :: arrow3
    {{tex \multimap }}
    |  o-o                ::   :: arrow4
    {{tex \multimapboth }}        
    | |-                  ::   :: turnstile
    {{tex \vdash }}
    | |~                  ::   :: ndash
    {{tex \not \vdash }}    
    | succ                ::   :: succ
    {{tex \mathsf{succ} }}
    | ~                   ::   :: cons
    {{tex \sim }}
    | ~U                  ::   :: conv
    {{tex \sim_U }}    
    | elem                ::   :: elem
    {{tex \in }}
    | ~>                  ::   :: red
    {{tex \rightsquigarrow }}
    | box        :: :: box
    {{tex \mathsf{box} }}
    | unbox        :: :: unbox
    {{tex \mathsf{unbox} }}
    | fst        :: :: fst
    {{tex \mathsf{fst} }}
    | snd        :: :: snd
    {{tex \mathsf{snd} }}                

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | formula1 && formula2 ::  :: Quad
    {{tex [[formula1]] \quad [[formula2]] }}
    | ( formula )         :: S :: parens
    {{tex [[formula]] }}
    | G = (.)( T , c ) :: :: CtxEq1
    {{tex [[G]] = \bigodot ([[T]],[[c]]) }}
    | D = >( T , c ) :: :: CtxEq2
    {{tex [[D]] = \mathlarger{\mathlarger{\mathlarger{\rhd} } }([[T]],[[c]]) }}
    | ->op( c1 , c2 ) :: :: LImpRel
    {{tex \mathsf{rel}_[[->]]([[c1]],[[c2]]) }}
    | <-op( c1 , c2 ) :: :: RImpRel
    {{tex \mathsf{rel}_[[<-]]([[c1]],[[c2]]) }}
    | -oop( c1 , c2 ) :: :: ImpRel
    {{tex \mathsf{rel}_[[-o]]([[c1]],[[c2]]) }}
    | o-oop( c1 , c2 ) :: :: ImpRel2
    {{tex \mathsf{rel}_[[o-o]]([[c1]],[[c2]]) }}        

subrules
  T <:: E

defns
  Typing :: '' ::=

defn
 G ; D |-T  C T :: :: type :: 'T_'    
 {{tex [[G]];[[D]] \vdash_{[[C]]} [[T]] }} by
    
 --------------- :: var
 .;(b,c) |-T c b

 --------------- :: varC
 (b,c);. |-T c b

 G1;D1 |-T c1 T1 && G2;D2 |-T c2 T2
 -------------------------------------- :: para
 G1,G2;D1,D2 |-T (.)op(c1,c2) T1 (.)op T2

 G1;D1 |-T c1 T1 && G2;D2 |-T c2 T2
 -------------------------------------- :: seq
 G1,G2;D1,D2 |-T >op(c1,c2) T1 >op T2

defn
 I ; P |- C E :: :: eq :: 'E_'    
 {{tex [[I]];[[P]] \vdash_{[[C]]} [[E]] }} by

 ------------- :: var
 .;(E,c) |-c E
 
 ------------- :: varC
 (E,c);. |-c E


 I;P |-c1 T1 +op T2 
 --------------------------------------------------------- :: choiceSym
 I;P |-c (T1 +op T2) o-oop(c1,-) (T2 +op T1)


 I;P |-c1 (T1 +op T2) +op T3 
 ------------------------------------------------------------- :: choiceAssoc
 I;P |-c ((T1 +op T2) +op T3) o-oop(c1,-) (T1 +op (T2 +op T3))

 I;P |-T c1 T1 (.)op (T2 >op T3)
 ------------------------------------------------------------------------ :: distPara
 I;P |-c (T1 (.)op (T2 >op T3)) o-oop(c1,-) ((T1 (.)op T2) >op (T1 (.)op T3))

 I;P |-T c1 T1 +op (T2 >op T3)
 ------------------------------------------------------------------------ :: distChoice
 I;P |-c (T1 +op (T2 >op T3)) o-oop(c1,-) ((T1 +op T2) >op (T1 +op T3))

 I1;P1 |-c1 E1  && I2;P2 |-c2 E2
 -------------------------------------- :: paraI
 I1,I2;P1,P2 |-(.)op(c1,c2) E1 (.)op E2

 I2;P1 |-(.)op(c1,c2) E1 (.)op E2 && I1,(E1,c1),(E2,c2),I3;P2 |-c3 E3
 -------------------------------------------------------------------- :: paraE
 I1,I2,I3;P1,P2 |-c3 E3

 I1;P1 |-c1 E1  && I2;P2 |-c2 E2
 -------------------------------------- :: seqI
 I1,I2;P1,P2 |- >op(c1,c2) E1 >op E2

 I1;P2 |- >op(c1,c2) E1 >op E2 && I2;P1,(E1,c1),(E2,c2),P3 |-c3 E3
 ----------------------------------------------------------------- :: seqE
 I1,I2;P1,P2,P3 |-c3 E3

 I1,(E1,c1),(E2,c2),I2;P |-c E
 ----------------------------- :: ex
 I1,(E2,c2),(E1,c1),I2;P |-c E

 I;P,(E1,c1) |-c2 E2 && ->op(c1,c2)
 ---------------------------------- :: impRI
 I;P |- c2 E1 ->op(c1,-) E2

 I1;P1 |- c2 E1 ->op(c1,-) E2 && I2;P2 |-c1 E1
 ---------------------------------------------- :: impRE
 I1,I2;P1,P2 |-c2 E2

 I;(E1,c1),P |-c2 E2 && <-op(c1,c2)
 ---------------------------------- :: impLI
 I;P |- c2 E2 <-op(c1,-) E1

 I1;P1 |- c2 E2 <-op(c1,-) E1 && I2;P2 |-c1 E1
 ---------------------------------------------- :: impLE
 I1,I2;P1,P2 |-c2 E2

 I,(E1,c1);P |-c2 E2 && -oop(c1,c2)
 ---------------------------------- :: impI
 I;P |- c2 E1 -oop(c1,-) E2

 I1;P1 |- c2 E1 -oop(c1,-) E2 && I2;P2 |-c1 E1
 ---------------------------------------------- :: impE
 I1,I2;P1,P2 |-c2 E2 