% The full Ott spec of Simply Typed Grady.

embed
  {{tex-preamble \usepackage{cmll}
                 \usepackage{relsize} }}

metavar costvar, c ::=
metavar blocks, x, y , z, f ::=
metavar baseAttackVar, b ::=
indexvar index, i , j, k ::=

grammar
  A, B, C :: 'A_' ::=
    | b           :: :: Base
    | A x B   :: :: Prod
    {{tex [[A]] \times [[B]] }}
    | Top     :: :: Top
    {{tex \top }}
    | A (.) B :: :: Para
    {{tex [[A]] \odot [[B]] }}
    | A > B   :: :: Seq
    | A -o B  :: :: Limp
    | A o-o B :: :: BLimp
    | ( A )   :: :: Paren
    | h( A )  :: :: HParen
    {{tex [[A]] }}
    | on x y  :: :: on
    {{tex \mathsf{on}\,[[x]]\,[[y]] }}
    | table x :: :: table
    {{tex \mathsf{table}\,[[x]] }}
    | holds x :: :: holds
    {{tex \mathsf{holds}\,[[x]] }}
    | empty   :: :: empty
    {{tex \mathsf{empty} }}
    | clear x :: :: clear
    {{tex \mathsf{clear}\,[[x]] }}

  G {{ tex \Gamma }}, D {{tex \Delta }},
  I {{ tex \Theta }}, P {{tex \Psi }} :: G_ ::=                 
    | .                   ::   :: emptyCtx     
    {{tex \cdot }}
    | A                   ::   :: vn           
    | G , G'              ::   :: append       
    | ( G )               :: M :: parens  

  terminals :: 'terminals_' ::=
    | (.) :: :: Para
    {{tex \odot}}
    | > :: :: Seq
    {{tex \rhd}}
    | + :: :: Choice
    {{tex \sqcup }}
    |  ->                 ::   :: arrow
    {{tex \rightarrow }}
    |  <-                 ::   :: arrow2
    {{tex \leftarrow }}
    |  -o                 ::   :: arrow3
    {{tex \multimap }}
    |  o-o                 ::   :: arrow4
    {{tex \multimapboth }}        
    | |-                  ::   :: turnstile
    {{tex \vdash }}
    | |~                  ::   :: ndash
    {{tex \not \vdash }}    
    | succ                ::   :: succ
    {{tex \mathsf{succ} }}
    | ~                   ::   :: cons
    {{tex \sim }}
    | ~U                  ::   :: conv
    {{tex \sim_U }}    
    | elem                ::   :: elem
    {{tex \in }}
    | ~>                  ::   :: red
    {{tex \rightsquigarrow }}
    | box        :: :: box
    {{tex \mathsf{box} }}
    | unbox        :: :: unbox
    {{tex \mathsf{unbox} }}
    | fst        :: :: fst
    {{tex \mathsf{fst} }}
    | snd        :: :: snd
    {{tex \mathsf{snd} }}                

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | formula1 && formula2 ::  :: Quad
    {{tex [[formula1]] \quad [[formula2]] }}
    | ( formula )         :: S :: parens
    {{tex [[formula]] }}
    

defns
  Typing :: '' ::=

defn
 D ; G |- A :: :: ateq :: ''    
 {{tex [[D]];[[G]] \vdash [[A]] }} by

 -------- :: var
 .;A |- A
 
 -------- :: varC
 A;. |- A

 ---------- :: Top
 .;. |- Top

 D1;G |- A && D2;G |- B
 ---------------------- :: conjI
 D1,D2;G |- A x B

 D;G |- A x B
 ------------ :: conjE1
 D;G |- A
 
 D;G |- A x B
 ------------ :: conjE2
 D;G |- A

 D1;G1 |- A  && D2;G2 |- B
 ------------------------- :: paraI
 D1,D2;G1,G2 |- A (.) B

 D1;G2 |- A (.) B && D2;G1,A,B,G3 |- C
 ------------------------------------- :: paraE
 D1,D2;G1,G2,G3 |- C

 D1;G1 |- A  && D2;G2 |- B
 --------------------------- :: seqI
 D1,D2;G1,G2 |- A > B

 D2;G1 |- A > B && D1,A,B,D3;G2 |- C
 ---------------------------------------- :: seqE
 D1,D2,D3;G1,G2 |- C

 D;G1,A,B,G2 |- C
 ---------------------------- :: ex
 D;G1,B,A,G2 |- C

 D;G,A |- B
 --------------- :: impI
 D;G |- A -o B

 D1;G1 |- A -o B && D2;G2 |- A
 -------------------------------- :: impE
 D1,D2;G1,G2 |- B

 D2;G2 |- A -o B && D1;G1 |- B -o C
 -------------------------------------- :: comp
 D1,D2;G1,G2 |- A -o C

 -------------------------------------------------------------------------------- :: get
 .;empty, clear x |- (holds x) (.) (((table x) -o Top) x ((on x y) -o (clear y)))

 -------------------------------------------------------------------------- :: put
 .;holds x |- empty (.) h((clear x) (.) ((table x) x ((clear y) -o (on x y))))