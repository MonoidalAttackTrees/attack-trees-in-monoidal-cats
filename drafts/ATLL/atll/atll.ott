embed
  {{tex-preamble \usepackage{cmll}
                 \usepackage{mathabx}
                 \usepackage{relsize} }}

metavar costvar, c ::=
metavar termvar, x, y , z, f ::=
metavar baseAttackTVars, b ::= 
indexvar index, i , j, k ::=

grammar
  A, B, C, E, F, d {{tex D}}, T :: 'A_' ::=
    | Base     ::   :: Base
    {{tex \mathsf{Base} }}
    | A *  B   ::   :: Ten
    | A (.) B  ::   :: Para
    | A + B    ::   :: Choice
    | A -o B   ::   :: Limp
    | A o-o B  ::   :: Bilimp    
    | ( A )    ::   :: Paren
    | h( A )   :: M :: HParen
    {{tex [[A]] }}

  p :: 'Pat_' ::=
    | -  :: :: H
    | x  :: :: Var
    | p1 * p2 :: :: Ten
    | p1 (.) p2 :: :: Para
    | p1 + p2   :: :: Choice
    | p1 o p2   :: M :: Circ
    {{tex [[p1]] \circ [[p2]] }}    
    | ( p )     :: :: Parens

  t :: 'Term_' ::=
    | b                ::   :: BaseAttacks
    | x                ::   :: Var
    | t1 * t2          ::   :: Ten
    | t1 o t2          :: M :: Circ
    {{tex [[t1]] \circ [[t2]] }}
    | t1 (.) t2        ::   :: Para
    | let p = t1 in t2 :: :: Let
    {{tex \mathsf{let}\,[[p]] = [[t1]]\,\mathsf{in}\,[[t2]] }}
    | t1 + t2          ::   :: Choice
    | \ x . t          ::   :: Fun
    {{tex \lambda [[x]] . [[t]] }}
    | t1 t2            ::   :: App
    | ( t )            :: M :: paren
    | [ t1 / x ] t2    :: M :: Sub

  G {{ tex \Gamma }}, D {{tex \Delta }} :: G_ ::=                 
    | .                   ::   :: emptyCtx
    {{tex \emptyset }}
    | x : A               ::   :: hyp
    | G ( G' )            ::   :: peak
    {{tex [[G]]([[G']]) }}
    | G , G'              ::   :: tensorA
    | G1 [] G2            ::   :: choiceA
    {{tex [[G1]] \sqbullet [[G2]] }}
    | G1 . G2             ::   :: paraA
    {{tex [[G1]] \bullet [[G2]] }}
    | G1 o G2             :: M :: Circ
    {{tex [[G1]] \circ [[G2]] }}
    | ( G )               ::   :: parens
    | h( G )              ::   :: hparens
    {{tex [[G]] }}

  terminals :: 'terminals_' ::=
    | (.) :: :: Para
    {{tex \odot}}
    | (+) :: :: Par
    {{tex \oplus}}    
    | > :: :: Seq
    {{tex \rhd}}
    | + :: :: Choice
    {{tex \sqcup }}
    |  ->                 ::   :: arrow
    {{tex \rightharpoonup }}
    |  <-                 ::   :: arrow2
    {{tex \leftharpoonup }}
    |  -o                 ::   :: arrow3
    {{tex \multimap }}
    |  o-o                 ::   :: arrow4
    {{tex \multimapboth }}        
    | |-                  ::   :: turnstile
    {{tex \vdash }}
    | |~                  ::   :: ndash
    {{tex \not \vdash }}    
    | succ                ::   :: succ
    {{tex \mathsf{succ} }}
    | ~                   ::   :: cons
    {{tex \sim }}
    | ~U                  ::   :: conv
    {{tex \sim_U }}    
    | elem                ::   :: elem
    {{tex \in }}
    | ~>                  ::   :: red
    {{tex \rightsquigarrow }}
    | box        :: :: box
    {{tex \mathsf{box} }}
    | unbox        :: :: unbox
    {{tex \mathsf{unbox} }}
    | fst        :: :: fst
    {{tex \mathsf{fst} }}
    | snd        :: :: snd
    {{tex \mathsf{snd} }}
    | !=         :: :: Neq
    {{tex \neq }}
    | nin        :: :: Nin
    {{tex \not\in }}

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | formula1 && formula2 ::  :: Quad
    {{tex [[formula1]] \quad [[formula2]] }}
    | ( formula )         :: S :: parens
    {{tex [[formula]] }}
    | D1 != D2            :: M :: NeqC
    | b in BB             :: M :: BaseAttacks
    {{tex [[b]] \in \mathbb{B} }}
    
defns
  Typing :: '' ::=

defn
  G1 |- G2 :: :: ctxm :: 'C_'
  {{com Context Morphisms }}
  {{tex [[G1]] \vdash [[G2]] }} by

  ------ :: id
  G |- G

  G1 |- G2 && G2 |- G3
  -------------------- :: c
  G1 |- G3

  -------------------------------- :: a1
  (G1 o G2) o G3 |- G1 o (G2 o G3)

  ---------- :: u1
  G o . |- G

  ---------- :: u2
  . o G |- G

  -------------------------------- :: e1
  G(x : A,y : B) |- G(y : B,x : A)

  -------------------------------- :: e2
  G(x : A.y : B) |- G(x : B.y : A)

  -------------------------------------- :: e3
  G(x : A [] y : B) |- G(y : B [] x : A)

  -------------------- :: Weak
  G(D1) |- G(D1 [] D2)

  ----------------- :: contract
  G(D [] D) |- G(D)

defn
 G |- t : A :: :: atl :: 'L_'
 {{com Attack Tree Logic (ATL) }}
 {{tex [[G]] \vdash [[t]]:[[A]] }} by
    
 -------------- :: var
 x : B |- x : B

 b in BB
 ------------- :: base
 . |- b : Base

 G1 |- G2 && G2 |- t : A
 ----------------------- :: Ctx
 G1 |- t : A

 G |- t1 : A && D |- t2 : B
 -------------------------- :: tenI
 G , D |- t1 * t2 : A * B

 G |- t1 : A && D |- t2 : B
 -------------------------- :: paraI
 G.D |- t1 (.) t2 : A (.) B

 G |- t1 : A && D |- t2 : B
 -------------------------- :: choiceI
 G [] D |- t1 + t2 : A + B

 G |- t1 : A * B && D(x : A,y : B) |- t2 : C
 --------------------------------------------- :: tenE
 D(G) |- let x * y = t1 in t2 : C

 G |- t1 : A (.) B && D(x : A.y : B) |- t2 : C
 --------------------------------------------- :: paraE
 D(G) |- let x (.) y = t1 in t2 : C

 G |- t1 : A + B && D(x : A [] y : B) |- t2 : C
 ---------------------------------------------- :: choiceE
 D(G) |- let x + y = t1 in t2 : C

 G,x : A |- t : B
 ------------------ :: limpI
 G |- \x.t : A -o B

 G |- t1 : A -o B && D |- t2 : A
 ------------------------------- :: limpE
 G,D |- t1 t2 : B

defn
  t1 ~> t2 :: :: atl_RW :: 'R_'
by

  ---------------------- :: beta
  (\x.t2) t1 ~> [t1/x]t2

  ----------------------------------------------- :: let
  (let x o y = t1 o t2 in t3) ~> ([t1/x][t2/y]t3)

  ----------------------------------------------- :: letC1
  (let p = t1 in t2) t3 ~> (let p = t1 in (t2 t3))

  -------------------------------------------------------------------------- :: letC2         
  (let p2 = (let p1 = t1 in t2) in t3) ~> (let p1 = t1 in let p2 = t2 in t3)

%