embed
  {{tex-preamble \usepackage{cmll}
                 \usepackage{mathabx}
                 \usepackage{relsize} }}

metavar costvar, c ::=
metavar termvar, x, y , z, f ::=
metavar baseAttackVars, N ::=
metavar baseAttackTVars, n ::= 
indexvar index, i , j, k ::=

grammar
  A, B, C, E, F, d {{tex D}}, T :: 'A_' ::=
    | N        :: :: Base
    | A (.) B  :: :: Para
    | A > B    :: :: Seq
    | A + B    :: :: Choice
    | A -o B   :: :: Limp
    | A -> B   :: :: SeqImpL
    | B <- A   :: :: SeqImpR
    | A o-o B  :: :: Bilimp    
    | ( A )    :: :: Paren
    | h( A )   ::  :: HParen
    {{tex [[A]] }}

  p :: 'Pat_' ::=
    | -  :: :: H
    | x  :: :: Var
    | p1 (+) p2 :: :: Par
    | p1 (.) p2 :: :: Para
    | p1 > p2   :: :: Seq
    | p1 + p2   :: :: Choice
    | ( p )     :: :: Parens

  G {{ tex \Gamma }}, D {{tex \Delta }} :: G_ ::=                 
    | *                   ::   :: emptyCtx     
    | A                   ::   :: hyp
    | G ( G' )            ::   :: peak
    {{tex [[G]]([[G']]) }}
    | G , G'              ::   :: tensorA
    | G ; G'              ::   :: seqenceA
    | G1 [] G2            ::   :: choiceA
    {{tex [[G1]] \sqbullet [[G2]] }}
    | G1 . G2             ::   :: paraA
    {{tex [[G1]] \bullet [[G2]] }}
    | G1 o G2             ::   :: circ
    {{tex [[G1]] \circ [[G2]] }}
    | ( G )               ::   :: parens
    | h( G )              ::   :: hparens
    {{tex [[G]] }}

  terminals :: 'terminals_' ::=
    | (.) :: :: Para
    {{tex \odot}}
    | (+) :: :: Par
    {{tex \oplus}}    
    | > :: :: Seq
    {{tex \rhd}}
    | + :: :: Choice
    {{tex \sqcup }}
    |  ->                 ::   :: arrow
    {{tex \rightharpoonup }}
    |  <-                 ::   :: arrow2
    {{tex \leftharpoonup }}
    |  -o                 ::   :: arrow3
    {{tex \multimap }}
    |  o-o                 ::   :: arrow4
    {{tex \multimapboth }}        
    | |-                  ::   :: turnstile
    {{tex \vdash }}
    | |~                  ::   :: ndash
    {{tex \not \vdash }}    
    | succ                ::   :: succ
    {{tex \mathsf{succ} }}
    | ~                   ::   :: cons
    {{tex \sim }}
    | ~U                  ::   :: conv
    {{tex \sim_U }}    
    | elem                ::   :: elem
    {{tex \in }}
    | ~>                  ::   :: red
    {{tex \rightsquigarrow }}
    | box        :: :: box
    {{tex \mathsf{box} }}
    | unbox        :: :: unbox
    {{tex \mathsf{unbox} }}
    | fst        :: :: fst
    {{tex \mathsf{fst} }}
    | snd        :: :: snd
    {{tex \mathsf{snd} }}
    | !=         :: :: Neq
    {{tex \neq }}
    | nin        :: :: Nin
    {{tex \not\in }}

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | formula1 && formula2 ::  :: Quad
    {{tex [[formula1]] \quad [[formula2]] }}
    | ( formula )         :: S :: parens
    {{tex [[formula]] }}
    | D1 != D2            :: M :: NeqC
    
defns
  Typing :: '' ::=

defn
  G1 |- G2 :: :: ctxm :: 'C_'
  {{com Context Morphisms }}
  {{tex [[G1]] \vdash [[G2]] }} by

  ------ :: id
  G |- G

  G1 |- G2 && G2 |- G3
  -------------------- :: c
  G1 |- G3

  -------------------------------- :: a1
  (G1 o G2) o G3 |- G1 o (G2 o G3)

  ---------- :: u1
  G o * |- G

  ---------- :: u2
  * o G |- G

  ---------------- :: e1
  G(A,B) |- G(B,A)

  ---------------- :: e2
  G(A.B) |- G(B.A)

  ---------------------- :: e3
  G(A [] B) |- G(B [] A)

  ---------------------------------------- :: i1
  G((D1;D3).(D2;D4)) |- G((D1.D2);(D3.D4))
 
  ----------------------------------------------- :: i2
  G((D1;D3)[](D2;D4)) |- G((D1 [] D2);(D3 [] D4))

  ----------------------------------------------- :: i2i
  G((D1 [] D2);(D3 [] D4)) |- G((D1;D3)[](D2;D4))

  ------------------------------------------------- :: i3
  G((D1.D3) [] (D2.D4)) |- G((D1 [] D2).(D3 [] D4))

  ------------------------------------------------- :: i3i
  G((D1 [] D2).(D3 [] D4)) |- G((D1.D3) [] (D2.D4))

  -------------------------------- :: d1
  G(A;(D1.D2)) |- G((A;D1).(A;D2))

  -------------------------------- :: d2
  G((A;D1).(A;D2)) |- G(A;(D1.D2))

  -------------------------------- :: d3
  G(A,(D1.D2)) |- G((A,D1).(A,D2))

  -------------------------------- :: d4
  G((A,D1).(A,D2)) |- G(A,(D1.D2))

  -------------------- :: Weak
  G(D1) |- G(D1 [] D2)

  ----------------- :: contract
  G(D [] D) |- G(D)

defn
 G |- A :: :: atl :: 'L_'
 {{com Attack Tree Logic (ATL) }}
 {{tex [[G]] \vdash [[A]] }} by
    
 ------ :: var
 B |- B

 ------ :: node
 * |- N

 G1 |- G2 && G2 |- A
 ----------------------- :: Ctx
 G1 |- A

 G |- A && D |- B
 ---------------- :: paraI
 G.D |- A (.) B

 G |- A && D |- B
 ---------------- :: choiceI
 G [] D |- A + B

 G |- A && D |- B
 ---------------- :: seqI
 G;D |- A >  B

 G |- A (.) B && D(A.B) |- C
 --------------------------- :: paraE
 D(G) |- C

 G |- A + B && D(A [] B) |- C
 -------------------------------------- :: choiceE
 D(G) |- C

 G |- A > B && D(A;B) |- C
 -------------------------------------- :: seqE
 D(G) |- C

 G,A |- B
 ----------- :: limpI
 G |- A -o B

 G |- A -o B && D |- A
 --------------------- :: limpE
 G,D |- B

 G;A |- B
 ----------- :: RlimpI
 G |- A -> B

 G |- A -> B && D |- A
 ------------------------------- :: RlimpE
 G;D |- B

 A;G |- B
 ----------- :: LlimpI
 G |- B <- A

 G |- B <- A && D |- A
 --------------------- :: LlimpE
 D;G |- B

%